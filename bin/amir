#!/usr/bin/python2
# -*- coding: utf-8 -*-
# Copyright (C) 2010 <jooyeshgar> <info@jooyeshgar.com>
#This program is free software: you can redistribute it and/or modify it
#under the terms of the GNU General Public License version 3, as published
#by the Free Software Foundation.
#
#This program is distributed in the hope that it will be useful, but
#WITHOUT ANY WARRANTY; without even the implied warranties of
#MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
#PURPOSE.  See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along
#with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/env python

import sys

if sys.platform == 'win32':
    fsock = open('error.log', 'w')
    sys.stderr = fsock
    fsock = open('stdout.log', 'w')
    sys.stdout = fsock

import os, logging
import pygtk
pygtk.require('2.0')
import gtk,gtk.glade
import gettext,locale
import gobject

# Check if we are working in the source tree or from the installed
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from amir.amirconfig import config

os.environ['LANG'] = config.locale
if sys.platform == 'win32':
    lang = config.locale
    from ctypes import windll
    kernel32 = windll.kernel32
    result = kernel32.SetEnvironmentVariableW('LANG', config.locale)
    del kernel32
    if result == 0:
        raise

    from ctypes import cdll
    msvcrt = cdll.msvcrt
    result = msvcrt._putenv('LANG=%s' % (config.locale))
    del msvcrt

locale.setlocale(locale.LC_ALL, '')
gtk.glade.bindtextdomain('amir', config.locale_path)
gtk.glade.textdomain('amir')
gettext.install('amir', config.locale_path, unicode=1)

from amir import subjects, addeditdoc, database, numberentry, notebookreport, docreport, tbalancereport, notebookutils, setting, helpers

class MainWindow(gobject.GObject):

    def manualDocument(self, sender):
        dialog = addeditdoc.AddEditDoc()
        self.connect("database-changed", dialog.dbChanged)

    def quitMainWindow(self, sender):
        pass

    def dailyNotebookReport(self, sender):
        reportwin = notebookreport.NotebookReport()

    def ledgerNotebookReport(self, sender):
        reportwin = notebookreport.NotebookReport(notebookreport.NotebookReport.LEDGER)

    def subledgerNotebookReport(self, sender):
        reportwin = notebookreport.NotebookReport(notebookreport.NotebookReport.SUBLEDGER)

    def documentReport(self, sender):
        reportwin = docreport.DocumentReport()

    def trialReport(self, sender):
        reportwin = tbalancereport.TBalanceReport()

    def aboutAmir(self, sender):
    	aboutwin = self.builder.get_object("aboutdialog")
    	aboutwin.run()
    	aboutwin.hide()

    def manageSubjects(self, sender):
        dialog = subjects.Subjects()
        self.connect("database-changed", dialog.dbChanged)

    def editDocument(self, sender):
        dialog = self.builder.get_object("selectdoc")
        self.numentry.set_activates_default(True)
        res = dialog.run()
        dialog.hide()
        if res == gtk.RESPONSE_OK:
            if self.numentry.get_text() != "":
                dialog = addeditdoc.AddEditDoc(int(unicode(self.numentry.get_text())))
                self.connect("database-changed", dialog.dbChanged)

    def arrangeDocments(self, sender):
        notebookutils.arrangeDocuments(self.window)

    def settingsDialog(self, sender):
        window = setting.Setting()
        window.connect("dblist-changed", self.reloadDatabases)
        window.connect("database-changed", self.databaseChanged)
        window.connect("locale-changed", self.localeChanged)

    def quitMainWindow(self, sender):
        msgbox = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL, gtk.MESSAGE_WARNING, gtk.BUTTONS_OK_CANCEL, "Are you sure to close the app?")
        msgbox.set_title("Are you sure?")
        result = msgbox.run();
        if result == gtk.RESPONSE_CANCEL :
            msgbox.destroy()
        else :
            self.window.destroy()

    def delete_event(self, widget, event, data=None):
         msgbox = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL, gtk.MESSAGE_WARNING, gtk.BUTTONS_OK_CANCEL, _("Are you sure to close the app?"))
         msgbox.set_title(_("Are you sure?"))
         result = msgbox.run();
         if result == gtk.RESPONSE_CANCEL :
            msgbox.destroy()
            return True
         else :
            return False
        # Change FALSE to TRUE and the main window will not be destroyed
        # with a "delete_event".

    def destroy(self, widget, data=None):
        config.updateConfigFile()
        gtk.main_quit()

    def __init__(self):
        gobject.GObject.__init__(self)

        if config.directionlist[config.localelist.index(config.locale)] == "rtl" :
            gtk.widget_set_default_direction(gtk.TEXT_DIR_RTL)
        else:
            gtk.widget_set_default_direction(gtk.TEXT_DIR_LTR)

        icondir = os.path.join(config.data_path, "media", "icon")

        try:
        	icon16 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "16.png"))
        	icon22 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "22.png"))
        	icon32 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "32.png"))
        	icon48 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "48.png"))
        	icon64 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "64.png"))
        	icon128 = gtk.gdk.pixbuf_new_from_file(os.path.join(icondir, "128.png"))
        	gtk.window_set_default_icon_list(icon16, icon22, icon32, icon48, icon64, icon128)
        except gobject.GError:
        	pass

        self.builder = helpers.get_builder("mainwin")
        self.window = self.builder.get_object("window1")
        self.numentry = numberentry.NumberEntry()
        box = self.builder.get_object("numbox")
        box.add(self.numentry)
        self.numentry.show()

        self.dblist = self.builder.get_object("dblist")
        helpers.comboInsertItems(self.dblist, config.dbnames)
        self.dblist.set_active(config.currentdb - 1)

        initial = self.builder.get_object("menubar2")
        initial.hide()
        self.builder.connect_signals(self)

        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)
        #self.window.set_border_width(10)
        self.window.show()

        if config.repair_atstart == True:
        	msg = _("Repairing database, Please wait...")
        	self.msgbox = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, gtk.BUTTONS_NONE, msg)
        	self.msgbox.set_title(_("Repairing database"))
        	self.msgbox.show_all()

        	while gtk.events_pending():
        		gtk.main_iteration_do(False)

       		gobject.timeout_add(1000, self.repairDbFunc)

    def repairDbFunc(self):
        config.db.rebuild_nested_set(0, 0)

        self.msgbox.set_markup(_("Repair Operation Completed!"))
        self.msgbox.add_button(gtk.STOCK_OK, -5)
        self.msgbox.run()
        self.msgbox.destroy()
        return False

    def dbSelected(self, combo):
        active_index = combo.get_active()
        if active_index != config.currentdb - 1:
            msgbox = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL, gtk.MESSAGE_WARNING, gtk.BUTTONS_OK_CANCEL,
                                       _("You have changed the current database, any unsaved data will be lost.\nAre you sure to continue?"))
            msgbox.set_title(_("Are you sure?"))
            result = msgbox.run()
            msgbox.destroy()
            if result == gtk.RESPONSE_OK :
                config.db.session.close()
                config.db = database.Database(config.dblist[active_index], config.db_repository, config.echodbresult)
                config.currentdb = active_index + 1

                self.emit("database-changed", config.dblist[active_index])
                msgbox = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, gtk.BUTTONS_OK,
                                   _("Database changed successfully.") )
                msgbox.set_title(_("Successfully changed"))
                msgbox.run()
                msgbox.destroy()
            else:
                combo.set_active(config.currentdb - 1)

#    def showNewDatabase(self, sender, active_dbpath):
#        active_index = config.dblist.index(active_dbpath)
#        self.dblist.set_active(active_index)

    def reloadDatabases(self, sender, active_dbpath):
        helpers.comboInsertItems(self.dblist, config.dbnames)
        active_index = config.dblist.index(active_dbpath)
        self.dblist.set_active(active_index)

    def databaseChanged(self, sender, active_path):
        self.emit("database-changed", active_path)

    def localeChanged(self, sender, new_locale):
        os.environ['LANG'] = new_locale
        locale.setlocale(locale.LC_ALL, '')
        gtk.glade.bindtextdomain('amir', config.locale_path)
        gtk.glade.textdomain('amir')
        gettext.install('amir', config.locale_path, unicode=1)
        logging.info('New locale: ' + new_locale)

    def main(self):
        gtk.main()

if __name__ == "__main__":
     gobject.type_register(MainWindow)
     gobject.signal_new("database-changed", MainWindow, gobject.SIGNAL_RUN_LAST,
                   gobject.TYPE_NONE, (gobject.TYPE_STRING,))

     mainwin = MainWindow()
     mainwin.main()

